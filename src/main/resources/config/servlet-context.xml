<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
<!-- 	<context:component-scan base-package="com.itwillbs.mvc_board" /> -->
<!-- 	<context:component-scan base-package="com.itwillbs.mvc_board.member.controller" /> -->
	<!-- 스캔 대상 패키지를 공통 루트 패키지만 지정하고, 대신 스캔할 어노테이션을 지정하는 방법  -->
	<!-- component-scan 태그의 base-package 속성을 기본 패키지를 지정하고 -->
	<!-- 태그 내부에 exclude-filter(제외할 대상 어노테이션) 또는 include-filter(포함할 대상 어노테이션) 지정 -->
	<context:component-scan base-package="com.itwillbs.clish">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.RestController"/>
	</context:component-scan>
	<!-- => com.itwillbs.mvc_board.controller 패키지 및 하위 패키지에서 모든 클래스 스캔 -->
	<!-- => 주의! 컨트롤러 클래스가 controller 패키지 외부에 있을 경우 컨트롤러 기능 수행 불가! -->
	
	<!-- application.properties 내의 프로퍼티값을 MVC 관련 클래스들에서도 사용하려면 설정 추가 -->
	<!-- 기본적으로는 root-context.xml 에서 관리하지만, 스프링 프레임워크에서 MVC 관련 클래스는 servlet-context.xml 이 담당하기 때문 -->
	<context:property-placeholder location="classpath:/config/application.properties"/>
	
	<!-- =================================================================================== -->
	<!-- 
	파일 업로드 처리를 위해 form 태그에 enctype="multipart/form-data" 속성을 추가했을 경우
	스프링 컨트롤러에서 폼 파라미터 데이터 처리를 위해(또는 MultipartFile 타입 객체 처리 위해)
	org.springframework.web.multipart.commons.CommonsMultipartResolver 객체 설정 필수!
	(꼭 MultipartFile 타입 객체를 사용하지 않더라도 request 객체를 통한 파라미터 처리가 가능해짐)
	(또한, CommonsMultipartResolver 타입 대신 StandardServletMultipartResolver 타입 사용도 가능(더 최신))
	=> bean 태그(현재 servlet-context.xml 파일에서는 <beans:bean> 태그) 사용하여 객체 설정
	=> id 속성값은 "muiltipartResolver" 고정
	=> class 속성값은 해당 라이브러리의 클래스 지정
	=> <beans:bean> 태그 사이에 <beans:property> 태그를 통해 파일 업로드 옵션(사이즈, 인코딩) 설정
	   이 때, name 속성값은 고정된 값 사용
	   1) maxUploadSize 프로퍼티 : 최대 업로드 가능한 파일 크기(바이트 단위)
	   2) defaultEncoding 프로퍼티 : 파일명 인코딩 방식(한글 등의 파일명 처리를 위해 UTF-8 로 설정)
	-->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760" />
		<beans:property name="defaultEncoding" value="UTF-8" />
	</beans:bean>
	
	
	
</beans:beans>












